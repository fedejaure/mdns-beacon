[tool.poetry]
name = "mdns-beacon"
version = "0.8.1"
description = "Multicast DNS (mDNS) Beacon to announce multiple CNAME aliases across your local network."
authors = ["Federico Jaureguialzo <fedejaure@gmail.com>"]
readme = "README.md"
homepage = "https://github.com/fedejaure/mdns-beacon"
repository = "https://github.com/fedejaure/mdns-beacon"
documentation = "https://mdns-beacon.readthedocs.io"
keywords = ["mdns-beacon", "mdns", "beacon", "avahi", "zeroconf", "bonjour"]
classifiers=[
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/fedejaure/mdns-beacon/issues"

[tool.poetry.scripts]
mdns-beacon = 'mdns_beacon.cli.main:main'

[tool.poetry.dependencies]
python = "<3.12,>=3.8"
click = "^8.1.7"
zeroconf = "^0.119.0"
rich = "^13.6.0"
python-slugify = "^8.0.1"
typing-extensions = "^4.8.0"
click-option-group = "^0.5.6"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.5.0"
invoke = "^2.2.0"
bump2version = "^1.0.1"

[tool.poetry.group.formating.dependencies]
isort = "^5.12.0"
black = "^23.10.1"

[tool.poetry.group.security.dependencies]
safety = "^2.4.0b1"

[tool.poetry.group.linters.dependencies]
flake8 = ">=4.0.1,<5.0"
flakeheaven = "^3.3.0"
flake8-builtins = "^2.1.0"
flake8-blind-except = "^0.2.1"
flake8-logging-format = "^0.9.0"
flake8-bugbear = "^23.3.12"
flake8-annotations = "^2.9.1"
flake8-docstrings = "^1.7.0"
flake8-bandit = "^3.0.0"
flake8-broken-line = "^0.6.0"
darglint = "^1.8.1"
pylint = "^3.0.2"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
xdoctest = "^1.1.2"
coverage = {version = "^7.3.2", extras = ["toml"]}
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.12.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.1.2"
recommonmark = "^0.7.1"
watchdog = {version = "^3.0.0", extras = ["watchmedo"]}

[tool.poetry.group.typing.dependencies]
mypy = "^1.6.1"
types-click = "^7.1.8"
types-python-slugify = "^8.0.0.3"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["mdns_beacon"]

[tool.coverage.report]
fail_under = 90
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "if settings.DEBUG:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == __main__:"
]
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.flakeheaven]
format = "grouped"
max_line_length = 99
show_source = true
docstring-convention = "google"
extended_default_ignore = []

[tool.flakeheaven.plugins]
pyflakes = ["+*"]
pycodestyle = ["+*"]
mccabe = ["+*"]
flake8-annotations = ["+*", "-ANN1??", "-ANN401"]
flake8-docstrings = ["+*", "-D212"]
"flake8-*" = ["+*"]
pylint = ["-C????", "-E????", "+F????", "+I????", "-R????", "-W????"]

[tool.flakeheaven.exceptions."tests/"]
flake8-bandit = ["-S101"]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 99
known_third_party = ["invoke", "nox", "nox_poetry"]
known_local_folder = ["helpers"]

[tool.black]
line-length = 99
target-version = ["py38"]

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning:xdoctest.*:",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial",
]
norecursedirs = "tests/helpers"

[tool.mypy]
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["pytest.*", "invoke.*", "nox.*", "nox_poetry.*"]
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = true
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
