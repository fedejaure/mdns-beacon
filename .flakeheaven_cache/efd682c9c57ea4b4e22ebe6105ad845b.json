{"results": [["flake8-annotations", "ANN101", 22, 17, "Missing type annotation for self in method", "    def __init__(self, live: Live) -> None:\n"], ["flake8-annotations", "ANN101", 29, 21, "Missing type annotation for self in method", "    def spinner_text(self) -> str:\n"], ["flake8-annotations", "ANN101", 36, 16, "Missing type annotation for self in method", "    def spinner(self) -> Spinner:\n"], ["flake8-annotations", "ANN101", 44, 19, "Missing type annotation for self in method", "    def renderable(self) -> RenderableType:\n"], ["flake8-annotations", "ANN101", 57, 19, "Missing type annotation for self in method", "    def renderable(self) -> Table:\n"], ["flake8-annotations", "ANN101", 93, 8, "Missing type annotation for self in method", "        self,\n"], ["flake8-annotations", "ANN101", 107, 23, "Missing type annotation for self in method", "    def services_table(self) -> Table:\n"], ["flake8-annotations", "ANN101", 126, 19, "Missing type annotation for self in method", "    def renderable(self) -> RenderableType:\n"], ["flake8-annotations", "ANN101", 134, 8, "Missing type annotation for self in method", "        self, zeroconf: Zeroconf, service_type: str, name: str, state_change: ServiceStateChange\n"], ["flake8-annotations", "ANN401", 95, 9, "Dynamically typed expressions (typing.Any) are disallowed", "        *args: Any,\n"], ["flake8-annotations", "ANN401", 96, 10, "Dynamically typed expressions (typing.Any) are disallowed", "        **kwargs: Any,\n"], ["pylint", "C0103", 118, 12, "Variable name \"c\" doesn't conform to snake_case naming style (invalid-name)", "        for c in self.show_columns:\n"], ["pylint", "E0401", 10, 0, "Unable to import 'zeroconf' (import-error)", "from zeroconf import IPVersion, ServiceStateChange, Zeroconf\n"], ["pylint", "W0715", 101, 12, "Exception arguments suggest string formatting might be intended (raising-format-tuple)", "            raise ValueError(\n"], ["pylint", "W1113", 92, 4, "Keyword argument before variable positional arguments list in the definition of __init__ function (keyword-arg-before-vararg)", "    def __init__(\n"]], "digest": "c4ce0ab62af47c13fae0e64717fb4870"}