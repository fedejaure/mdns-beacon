{"results": [["pylint", "C0411", 13, 0, "third party import \"from helpers.contextmanager import raise_keyboard_interrupt\" should be placed before \"import mdns_beacon\" (wrong-import-order)", "from helpers.contextmanager import raise_keyboard_interrupt\n"], ["pylint", "E0401", 6, 0, "Unable to import 'pytest' (import-error)", "import pytest\n"], ["pylint", "E0401", 7, 0, "Unable to import 'click.testing' (import-error)", "from click.testing import CliRunner\n"], ["pylint", "E0401", 8, 0, "Unable to import 'pytest_mock' (import-error)", "from pytest_mock import MockerFixture\n"], ["flake8-bandit", "S101", 28, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "    assert result.exit_code == 0\n"], ["flake8-bandit", "S101", 29, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "    assert expected in result.output\n"], ["flake8-bandit", "S101", 60, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "    assert result.exit_code == 0\n"], ["flake8-bandit", "S101", 61, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "    assert expected in result.output\n"], ["flake8-bandit", "S101", 90, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "    assert result.exit_code == 0\n"], ["flake8-bandit", "S101", 91, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "    assert expected in result.output\n"], ["pylint", "W0511", 54, 79, "TODO: Fix me (fixme)", "    options = [opt.replace(\"example\", f\"example-{uuid}\") for opt in options]  # TODO: Fix me\n"], ["pylint", "W0613", 49, 4, "Unused argument 'mocker' (unused-argument)", "    mocker: MockerFixture, safe_loop: AbstractEventLoop, options: List[str], expected: str\n"], ["pylint", "W0613", 49, 27, "Unused argument 'safe_loop' (unused-argument)", "    mocker: MockerFixture, safe_loop: AbstractEventLoop, options: List[str], expected: str\n"], ["pylint", "W0613", 78, 4, "Unused argument 'mocker' (unused-argument)", "    mocker: MockerFixture,\n"], ["pylint", "W0613", 79, 4, "Unused argument 'safe_loop' (unused-argument)", "    safe_loop: AbstractEventLoop,\n"]], "digest": "979893eb56f0a4a429f80d037d898cf2"}